name: CI/CD QA-Example

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build-and-analyze:
    name: Build, Test & SonarQube
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # Necesario para subir reportes SARIF de Bandit

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create and activate virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          pytest --cov=./ --cov-report=xml

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Bandit Scan
        uses: shundor/python-bandit-scan@ab1d87dfccc5a0ffab88be3aaac6ffe35c10d6cd
        with:
          exit_zero: true  # Continúa incluso si encuentra vulnerabilidades
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Para reportes SARIF
          path: .  # Escanea todos los archivos Python en la raíz
          level: MEDIUM  # Severidad MEDIUM o superior
          confidence: MEDIUM  # Confianza MEDIUM o superior
          excluded_paths: venv/**,tests/**,.coverage  # Excluye directorios recursivamente

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    name: Deploy to Azure Web App
    runs-on: ubuntu-latest
    needs: build-and-analyze
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_8D20F08E8E924C2C989FFB6673307A54 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D4E5E200AF3743B7B4F2D03887C5DD3C }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_8893EC1ABB7D44949E0F99C9403F9BDA }}

      - name: Check and Set Startup Command
        run: |
          CURRENT_STARTUP=$(az webapp config show --name QA-Example --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --query linuxFxVersion -o tsv)
          DESIRED_STARTUP="gunicorn -w 1 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000 -t 300 app:app"
          if [ "$CURRENT_STARTUP" != "$DESIRED_STARTUP" ]; then
            az webapp config set \
              --name QA-Example \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
              --startup-file "$DESIRED_STARTUP"
          fi
      
      - name: Wait for configuration to stabilize
        run: sleep 10

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'QA-Example'
          slot-name: 'Production'

      - name: 'Post-deployment actions'
        run: |
          echo "Deployment completed successfully."
          echo "Web App URL: ${{ steps.deploy-to-webapp.outputs.webapp-url }}"

      - name: Wait for deploy to stabilize
        run: sleep 10

      - name: Smoke Test API
        run: |
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy-to-webapp.outputs.webapp-url }}/health")
          if [ "$RESPONSE_CODE" -eq 200 ]; then
            echo "Smoke test passed with status 200."
            exit 0
          else
            echo "Error: Smoke test failed with status $RESPONSE_CODE."
            exit 1
          fi